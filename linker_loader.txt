//mc
203      01      3  02       
204      08      3  02       
205      03      2  07       
206      04      1  02       
207      10      202         
208      01      1  05       
209      01      1  07       
210      08      3  03       
211      03      2  07       
212      04      1  07       
213      10      206         
214      01      1  05       
215      01      1  07       
216      04      1  02       
217      01      3  02       
218      08      3  02       


//input 
START 1000
numbers DB 5, 4, 3, 2, 1           
n EQU 5                            
temp DB 0                         

MOV AX, 0
MOV DS, AX

MOV CX, n                          

OUTER_LOOP: 
    MOV BX, CX                     
    DEC BX                         
    MOV SI, 0                      

INNER_LOOP:
    MOV AL, [numbers + SI]         
    MOV DL, [numbers + SI + 1]     
    CMP AL, DL                    
    JAE NO_SWAP                    
    MOV [numbers + SI], DL        
    MOV [numbers + SI + 1], AL     

NO_SWAP:
    INC SI                         
    DEC BX                         
    JNZ INNER_LOOP                 

    DEC CX                         
    JNZ OUTER_LOOP                 

MOV AX, 4C00h                      
INT 21h
END




//code 1
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_LINES 100
#define MAX_LINE_LENGTH 100
#define MAX_SYMBOLS 100

typedef struct {
    int original_address;
    int relocation_factor;
    int relocated_address;
    char instruction[MAX_LINE_LENGTH];
} RelocationEntry;

typedef struct {
    char name[MAX_LINE_LENGTH];
    int address;
    int linked_address;
    char type[3];
} Symbol;

void extract_symbols(char assembly_code[MAX_LINES][MAX_LINE_LENGTH], int line_count, Symbol symbol_table[MAX_SYMBOLS], int *symbol_count) {
    int address = 200;

    for (int i = 0; i < line_count; i++) {
        char *line = assembly_code[i];

        if (strlen(line) == 0 || line[0] == ';') {
            continue;
        }

        if (strncmp(line, "START", 5) == 0) {
            sscanf(line, "START %d", &address);
            continue;
        }

        if (strstr(line, "ENTRY")) {
            char symbol_name[MAX_LINE_LENGTH];
            char directive[MAX_LINE_LENGTH];

            char *token = strtok(line, " ");
            token = strtok(NULL, " "); 

            while (token != NULL && (strcmp(token, "DC") != 0 && strcmp(token, "DS") != 0)) {
             
                strncpy(symbol_table[*symbol_count].name, token, MAX_LINE_LENGTH);
                symbol_table[*symbol_count].address = address;
                strncpy(symbol_table[*symbol_count].type, "pd", 3); 
                (*symbol_count)++;

              
                token = strtok(NULL, " ");
                address++; 
            }
        }

       
        address++;
    }
}


void calculate_relocation(int link_origin, int start_origin, char assembly_code[MAX_LINES][MAX_LINE_LENGTH], int line_count, FILE *output_file) {
    int relocation_factor = link_origin - start_origin;
    int address = start_origin;
    RelocationEntry relocation_table[MAX_LINES];
    int entry_count = 0;

    for (int i = 0; i < line_count; i++) {
        char *line = assembly_code[i];

        if (strlen(line) == 0 || line[0] == ';') {
            continue;
        }

        if (strncmp(line, "START", 5) == 0) {
            sscanf(line, "START %d", &address);
            continue;
        }

        
        int requires_relocation = 0;
        if (strstr(line, "JMP") || strstr(line, "CALL") || strstr(line, "MOV") || strstr(line, "LOAD") || strstr(line, "STORE")||strstr(line, "SUB")||strstr(line, "ADD")) {
            requires_relocation = 1;  
        }

       
        if (requires_relocation) {
            relocation_table[entry_count].relocated_address = address + relocation_factor;
            entry_count++;
        }

        address++;  
    }

    fprintf(output_file, "%-20s\n", "Relocated Address");

    for (int j = 0; j < entry_count; j++) {
        fprintf(output_file, "%-20d\n", relocation_table[j].relocated_address);
    }
}


int main() {
    int link_origin, start_origin = 200;
    char assembly_code[MAX_LINES][MAX_LINE_LENGTH];
    Symbol symbol_table[MAX_SYMBOLS];
    int line_count = 0, symbol_count = 0;

    printf("Enter the link origin: ");
    scanf("%d", &link_origin);
  
    getchar();
    
    FILE *file = fopen("input.txt", "r");
    if (file == NULL) {
        perror("Error opening file");
        return EXIT_FAILURE;
    }

    while (line_count < MAX_LINES && fgets(assembly_code[line_count], MAX_LINE_LENGTH, file)) {
        assembly_code[line_count][strcspn(assembly_code[line_count], "\n")] = 0;
        line_count++;
    }

    fclose(file);

    extract_symbols(assembly_code, line_count, symbol_table, &symbol_count);

    for (int j = 0; j < symbol_count; j++) {
        symbol_table[j].linked_address = symbol_table[j].address + (link_origin - start_origin);
    }

   FILE *symbol_file = fopen("linktab.txt", "w");
if (symbol_file == NULL) {
    perror("Error opening symbol output file");
    return EXIT_FAILURE;
}

fprintf(symbol_file, "%-20s %-20s %-20s\n", "Symbol", "Address", "Type");

for (int j = 0; j < symbol_count; j++) {
    fprintf(symbol_file, "%-20s %-20d %-20s\n", symbol_table[j].name, symbol_table[j].linked_address, symbol_table[j].type);
}

fclose(symbol_file);


    FILE *output_file = fopen("relotab.txt", "w");
    if (output_file == NULL) {
        perror("Error opening output file");
        return EXIT_FAILURE;
    }

    calculate_relocation(link_origin, start_origin, assembly_code, line_count, output_file);

    fclose(output_file);

    return 0;
}



//code 2
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_LINE_LENGTH 100

int is_empty_line(const char *line) {
    for (int i = 0; line[i] != '\0'; i++) {
        if (!isspace(line[i])) {
            return 0;
        }
    }
    return 1;
}

int find_start_address(FILE *input_file) {
    char line[MAX_LINE_LENGTH];
    int start_address = -1;

    while (fgets(line, MAX_LINE_LENGTH, input_file)) {
        if (strstr(line, "START") != NULL) {
            sscanf(line, "%*s %d", &start_address);
            break;
        }
    }
    return start_address;
}

int count_code_lines(FILE *input_file) {
    char line[MAX_LINE_LENGTH];
    int count = 0;

    while (fgets(line, MAX_LINE_LENGTH, input_file)) {
        if (!is_empty_line(line)) {
            count++;
        }
    }
    return count;
}



void append_relocation_table(const char *relocation_filename, FILE *output_file) {
    FILE *relocation_file = fopen(relocation_filename, "r");
    if (!relocation_file) {
        perror("Error opening relocation table file");
        exit(EXIT_FAILURE);
    }
    
    char line[MAX_LINE_LENGTH];
    
    fprintf(output_file, "\nRelocation Table:\n");
    while (fgets(line, MAX_LINE_LENGTH, relocation_file)) {
        fprintf(output_file, "%s", line);
    }

    fclose(relocation_file);
}

void append_link_table(const char *symbol_table_filename, FILE *output_file) {
    FILE *symbol_table_file = fopen(symbol_table_filename, "r");
    if (!symbol_table_file) {
        perror("Error opening symbol table file");
        exit(EXIT_FAILURE);
    }
    
    char line[MAX_LINE_LENGTH];
    
    fprintf(output_file, "\nLink Table:\n");
    while (fgets(line, MAX_LINE_LENGTH, symbol_table_file)) {
        fprintf(output_file, "%s", line);
    }

    fclose(symbol_table_file);
}

void append_machine_code(const char *machine_code_filename, FILE *output_file) {
    FILE *machine_code_file = fopen(machine_code_filename, "r");
    if (!machine_code_file) {
        perror("Error opening machine code file");
        exit(EXIT_FAILURE);
    }
    
    char line[MAX_LINE_LENGTH];
    
    fprintf(output_file, "\nMachine Code:\n");
    while (fgets(line, MAX_LINE_LENGTH, machine_code_file)) {
        fprintf(output_file, "%s", line);
    }

    fclose(machine_code_file);
}

int main() {
    FILE *input_file = fopen("input.txt", "r");
     FILE *mc = fopen("mc.txt", "r");
    FILE *output_file = fopen("object_module.txt", "w");
    if (!input_file || !output_file) {
        perror("Error opening files");
        exit(EXIT_FAILURE);
    }

    int start_address = find_start_address(input_file);
    if (start_address == -1) {
        fprintf(stderr, "START address not found in om.txt\n");
        exit(EXIT_FAILURE);
    }

    rewind(input_file);  
    int code_size = count_code_lines(mc);

    int relocation_factor =90;
    int adjusted_start_address = start_address + relocation_factor;

    fprintf(output_file, "Header:\n");
    fprintf(output_file, "Translated Address: %d\n", start_address);
    fprintf(output_file, "Code Size: %d\n", code_size);
    fprintf(output_file, "Start Address: %d\n", adjusted_start_address);

    append_machine_code("mc.txt", output_file);
    append_relocation_table("relotab.txt", output_file);
    append_link_table("linktab.txt", output_file);

    fclose(input_file);
    fclose(output_file);

    printf("Object module with header, machine code, relocation table, and link table created successfully in object_module.txt.\n");
    return 0;
}
