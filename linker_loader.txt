//mc
203      01      3  02       
204      08      3  02       
205      03      2  07       
206      04      1  02       
207      10      202         
208      01      1  05       
209      01      1  07       
210      08      3  03       
211      03      2  07       
212      04      1  07       
213      10      206         
214      01      1  05       
215      01      1  07       
216      04      1  02       
217      01      3  02       
218      08      3  02       


//input 
START 1000
numbers DB 5, 4, 3, 2, 1           
n EQU 5                            
temp DB 0                         

MOV AX, 0
MOV DS, AX

MOV CX, n                          

OUTER_LOOP: 
    MOV BX, CX                     
    DEC BX                         
    MOV SI, 0                      

INNER_LOOP:
    MOV AL, [numbers + SI]         
    MOV DL, [numbers + SI + 1]     
    CMP AL, DL                    
    JAE NO_SWAP                    
    MOV [numbers + SI], DL        
    MOV [numbers + SI + 1], AL     

NO_SWAP:
    INC SI                         
    DEC BX                         
    JNZ INNER_LOOP                 

    DEC CX                         
    JNZ OUTER_LOOP                 

MOV AX, 4C00h                      
INT 21h
END




//code 1
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_LINES 100
#define MAX_LINE_LENGTH 100
#define MAX_SYMBOLS 100

// Structure to store each entry of the relocation table
typedef struct {
    int original_address;
    int relocation_factor;
    int relocated_address;
    char instruction[MAX_LINE_LENGTH];
} RelocationEntry;

// Structure to store symbols with linked addresses and types
typedef struct {
    char name[MAX_LINE_LENGTH];
    int address;
    int linked_address; // Field for linked address
    char type[3]; // Field for type of symbol (PD or EX)
} Symbol;

void extract_symbols(char assembly_code[MAX_LINES][MAX_LINE_LENGTH], int line_count, Symbol symbol_table[MAX_SYMBOLS], int *symbol_count) {
    int address = 200; // Assuming the starting address for the program

    for (int i = 0; i < line_count; i++) {
        char *line = assembly_code[i];

        // Ignore empty lines and comments
        if (strlen(line) == 0 || line[0] == ';') {
            continue;
        }

        // Handle START directive
        if (strncmp(line, "START", 5) == 0) {
            sscanf(line, "START %d", &address);  // Update address with the start origin
            continue;
        }

        // Check for labels (symbols) with colons
        if (strchr(line, ':')) {
            char *label_end = strchr(line, ':');
            int label_length = label_end - line;
            strncpy(symbol_table[*symbol_count].name, line, label_length);
            symbol_table[*symbol_count].name[label_length] = '\0'; // Null-terminate the string
            symbol_table[*symbol_count].address = address;

            // Determine the type of symbol
            strncpy(symbol_table[*symbol_count].type, "PD", 3);
            (*symbol_count)++;
        }
        // Check for data symbols (e.g., DS, DC) without colons
        else if (strstr(line, "DS") || strstr(line, "DC")) {
            char symbol_name[MAX_LINE_LENGTH];
            sscanf(line, "%s", symbol_name); // Get the symbol name
            strncpy(symbol_table[*symbol_count].name, symbol_name, MAX_LINE_LENGTH);
            symbol_table[*symbol_count].address = address;

            // Assume data symbols are PD (can modify as needed)
            strncpy(symbol_table[*symbol_count].type, "PD", 3);
            (*symbol_count)++;
        }

        // Increment address for the current instruction
        address++;
    }
}

void calculate_relocation(int link_origin, int start_origin, char assembly_code[MAX_LINES][MAX_LINE_LENGTH], int line_count, FILE *output_file) {
    // Calculate the relocation factor
    int relocation_factor = link_origin - start_origin;

    // Initialize variables
    int address = start_origin;
    RelocationEntry relocation_table[MAX_LINES];
    int entry_count = 0;

    // Process each line of assembly code
    for (int i = 0; i < line_count; i++) {
        char *line = assembly_code[i];

        // Ignore empty lines and comments
        if (strlen(line) == 0 || line[0] == ';') {
            continue;
        }

        // Handle START directive
        if (strncmp(line, "START", 5) == 0) {
            sscanf(line, "START %d", &address);  // Update address with the start origin
            continue;
        }

        // Store the original address and calculate the relocated address
        relocation_table[entry_count].original_address = address;
        relocation_table[entry_count].relocation_factor = relocation_factor;
        relocation_table[entry_count].relocated_address = address + relocation_factor;
        strncpy(relocation_table[entry_count].instruction, line, MAX_LINE_LENGTH);

        // Increment address for next instruction (assuming 1 address unit per instruction)
        entry_count++;
        address++;
    }

    // Print the relocation table to the output file
    fprintf(output_file, "%-20s %-20s %-20s %s\n", "Original Address", "Relocation Factor", "Relocated Address", "Instruction");
    fprintf(output_file, "%s\n", "--------------------------------------------------------------------------------");
    for (int j = 0; j < entry_count; j++) {
        fprintf(output_file, "%-20d %-20d %-20d %s\n", relocation_table[j].original_address,
               relocation_table[j].relocation_factor,
               relocation_table[j].relocated_address,
               relocation_table[j].instruction);
    }
}

int main() {
    int link_origin, start_origin;
    char assembly_code[MAX_LINES][MAX_LINE_LENGTH];
    Symbol symbol_table[MAX_SYMBOLS];
    int line_count = 0, symbol_count = 0;

    // Input the link origin and start origin
    printf("Enter the link origin: ");
    scanf("%d", &link_origin);
    printf("Enter the start origin: ");
    scanf("%d", &start_origin);
    getchar(); // To consume the newline character after entering start origin
    
    // Open the input file for reading
    FILE *file = fopen("input.txt", "r");
    if (file == NULL) {
        perror("Error opening file");
        return EXIT_FAILURE;
    }

    // Read the assembly code from the file
    while (line_count < MAX_LINES && fgets(assembly_code[line_count], MAX_LINE_LENGTH, file)) {
        // Remove newline character from the end of the line
        assembly_code[line_count][strcspn(assembly_code[line_count], "\n")] = 0;
        line_count++;
    }

    // Close the input file
    fclose(file);

    // Extract symbols
    extract_symbols(assembly_code, line_count, symbol_table, &symbol_count);

    // Calculate linked addresses for symbols
    for (int j = 0; j < symbol_count; j++) {
        symbol_table[j].linked_address = symbol_table[j].address + (link_origin - start_origin);
    }

    // Open the symbol output file for writing
    FILE *symbol_file = fopen("linktab.txt", "w"); // Changed to linktab.txt
    if (symbol_file == NULL) {
        perror("Error opening symbol output file");
        return EXIT_FAILURE;
    }

    // Write the symbol table to the symbol output file
    fprintf(symbol_file, "%-20s %-20s %-20s %-20s\n", "Symbol", "Address", "Linked Address", "Type");
    fprintf(symbol_file, "%s\n", "---------------------------------------------------------------");
    for (int j = 0; j < symbol_count; j++) {
        fprintf(symbol_file, "%-20s %-20d %-20d %-20s\n", symbol_table[j].name, symbol_table[j].address, symbol_table[j].linked_address, symbol_table[j].type);
    }

    // Close the symbol output file
    fclose(symbol_file);

    // Open the relocation output file for writing
    FILE *output_file = fopen("relocationtab.txt", "w"); // Changed to relocationtab.txt
    if (output_file == NULL) {
        perror("Error opening output file");
        return EXIT_FAILURE;
    }

    // Calculate and write the relocation table to the output file
    calculate_relocation(link_origin, start_origin, assembly_code, line_count, output_file);

    // Close the output file
    fclose(output_file);

    return 0;
}


//code 2 #include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_LINE_LENGTH 100

// Function to check if a line is empty
int is_empty_line(const char *line) {
    for (int i = 0; line[i] != '\0'; i++) {
        if (!isspace(line[i])) {
            return 0;
        }
    }
    return 1;
}

// Function to find the start address in input.txt
int find_start_address(FILE *input_file) {
    char line[MAX_LINE_LENGTH];
    int start_address = -1;

    while (fgets(line, MAX_LINE_LENGTH, input_file)) {
        if (strstr(line, "START") != NULL) {
            sscanf(line, "%*s %d", &start_address);
            break;
        }
    }
    return start_address;
}

// Function to count non-empty lines in om.txt
int count_code_lines(FILE *input_file) {
    char line[MAX_LINE_LENGTH];
    int count = 0;

    while (fgets(line, MAX_LINE_LENGTH, input_file)) {
        if (!is_empty_line(line)) {
            count++;
        }
    }
    return count;
}

// Function to read any relocation factor from the column in relocationtab.txt
int get_relocation_factor(const char *filename) {
    FILE *file = fopen(filename, "r");
    if (!file) {
        perror("Error opening relocation table file");
        exit(EXIT_FAILURE);
    }
    
    char line[MAX_LINE_LENGTH];
    int relocation_factor = 0;
    
    // Skip the header line
    fgets(line, MAX_LINE_LENGTH, file);

    // Read the first valid relocation factor from the data rows
    while (fgets(line, MAX_LINE_LENGTH, file)) {
        if (sscanf(line, "%*d %d", &relocation_factor) == 1) {
            break;  // Stop after reading the first valid relocation factor
        }
    }

    printf("Relocation Factor: %d\n", relocation_factor);  // Print for confirmation

    fclose(file);
    return relocation_factor;
}

// Function to copy the relocation table from relocationtab.txt to object_module.txt
void append_relocation_table(const char *relocation_filename, FILE *output_file) {
    FILE *relocation_file = fopen(relocation_filename, "r");
    if (!relocation_file) {
        perror("Error opening relocation table file");
        exit(EXIT_FAILURE);
    }
    
    char line[MAX_LINE_LENGTH];
    
    fprintf(output_file, "\nRelocation Table:\n");
    // Copy each line from relocation table to the object module file
    while (fgets(line, MAX_LINE_LENGTH, relocation_file)) {
        fprintf(output_file, "%s", line);
    }

    fclose(relocation_file);
}

// Function to copy the link table from linktab.txt to object_module.txt
void append_link_table(const char *symbol_table_filename, FILE *output_file) {
    FILE *symbol_table_file = fopen(symbol_table_filename, "r");
    if (!symbol_table_file) {
        perror("Error opening symbol table file");
        exit(EXIT_FAILURE);
    }
    
    char line[MAX_LINE_LENGTH];
    
    fprintf(output_file, "\nLink Table:\n");
    // Copy each line from symbol table to the object module file
    while (fgets(line, MAX_LINE_LENGTH, symbol_table_file)) {
        fprintf(output_file, "%s", line);
    }

    fclose(symbol_table_file);
}

// Function to copy machine code from mc.txt to object_module.txt
void append_machine_code(const char *machine_code_filename, FILE *output_file) {
    FILE *machine_code_file = fopen(machine_code_filename, "r");
    if (!machine_code_file) {
        perror("Error opening machine code file");
        exit(EXIT_FAILURE);
    }
    
    char line[MAX_LINE_LENGTH];
    
    fprintf(output_file, "\nMachine Code:\n");
    // Copy each line from the machine code file to the object module file
    while (fgets(line, MAX_LINE_LENGTH, machine_code_file)) {
        fprintf(output_file, "%s", line);
    }

    fclose(machine_code_file);
}

int main() {
    // File pointers
    FILE *input_file = fopen("input.txt", "r");
    FILE *output_file = fopen("object_module.txt", "w");
    if (!input_file || !output_file) {
        perror("Error opening files");
        exit(EXIT_FAILURE);
    }

    // Step 1: Find the translated start address
    int start_address = find_start_address(input_file);
    if (start_address == -1) {
        fprintf(stderr, "START address not found in om.txt\n");
        exit(EXIT_FAILURE);
    }

    // Step 2: Calculate the code size (number of non-empty lines)
    rewind(input_file);  // Reset file pointer to start counting lines
    int code_size = count_code_lines(input_file);

    // Step 3: Get the relocation factor and calculate final start address
    int relocation_factor = get_relocation_factor("relocationtab.txt");
    int adjusted_start_address = start_address + relocation_factor;

    // Step 4: Write the header to object_module.txt
    fprintf(output_file, "Header:\n");
    fprintf(output_file, "Translated Address: %d\n", start_address);
    fprintf(output_file, "Code Size: %d\n", code_size);
    fprintf(output_file, "Start Address: %d\n", adjusted_start_address);

    // Step 5: Append the machine code to object_module.txt
    append_machine_code("mc.txt", output_file);

    // Step 6: Append the relocation table to object_module.txt
    append_relocation_table("relocationtab.txt", output_file);

    // Step 7: Append the link table (symbol table) to object_module.txt
    append_link_table("linktab.txt", output_file);

    // Close files
    fclose(input_file);
    fclose(output_file);

    printf("Object module with header, machine code, relocation table, and link table created successfully in object_module.txt.\n");
    return 0;
}
